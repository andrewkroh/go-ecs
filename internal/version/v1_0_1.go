// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by generator, DO NOT EDIT.
package version

var v1_0_1 = map[string]*Field{
	"@timestamp":                       {Name: "@timestamp", DataType: "date", Description: "Date/time when the event originated.\nThis is the date/time extracted from the event, typically representing when the event was generated by the source.\nIf the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\nRequired field for all events."},
	"agent.ephemeral_id":               {Name: "agent.ephemeral_id", DataType: "keyword", Description: "Ephemeral identifier of this agent (if one exists).\nThis id normally changes across restarts, but `agent.id` does not."},
	"agent.id":                         {Name: "agent.id", DataType: "keyword", Description: "Unique identifier of this agent (if one exists).\nExample: For Beats this would be beat.id."},
	"agent.name":                       {Name: "agent.name", DataType: "keyword", Description: "Custom name of the agent.\nThis is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.\nIf no name is given, the name is often left empty."},
	"agent.type":                       {Name: "agent.type", DataType: "keyword", Description: "Type of the agent.\nThe agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine."},
	"agent.version":                    {Name: "agent.version", DataType: "keyword", Description: "Version of the agent."},
	"client.address":                   {Name: "client.address", DataType: "keyword", Description: "Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is."},
	"client.bytes":                     {Name: "client.bytes", DataType: "long", Description: "Bytes sent from the client to the server."},
	"client.domain":                    {Name: "client.domain", DataType: "keyword", Description: "Client domain."},
	"client.geo.city_name":             {Name: "client.geo.city_name", DataType: "keyword", Description: "City name."},
	"client.geo.continent_name":        {Name: "client.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"client.geo.country_iso_code":      {Name: "client.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"client.geo.country_name":          {Name: "client.geo.country_name", DataType: "keyword", Description: "Country name."},
	"client.geo.location":              {Name: "client.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"client.geo.name":                  {Name: "client.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"client.geo.region_iso_code":       {Name: "client.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"client.geo.region_name":           {Name: "client.geo.region_name", DataType: "keyword", Description: "Region name."},
	"client.ip":                        {Name: "client.ip", DataType: "ip", Description: "IP address of the client.\nCan be one or multiple IPv4 or IPv6 addresses."},
	"client.mac":                       {Name: "client.mac", DataType: "keyword", Description: "MAC address of the client."},
	"client.packets":                   {Name: "client.packets", DataType: "long", Description: "Packets sent from the client to the server."},
	"client.port":                      {Name: "client.port", DataType: "long", Description: "Port of the client."},
	"client.user.email":                {Name: "client.user.email", DataType: "keyword", Description: "User email address."},
	"client.user.full_name":            {Name: "client.user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"client.user.group.id":             {Name: "client.user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"client.user.group.name":           {Name: "client.user.group.name", DataType: "keyword", Description: "Name of the group."},
	"client.user.hash":                 {Name: "client.user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"client.user.id":                   {Name: "client.user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"client.user.name":                 {Name: "client.user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"cloud.account.id":                 {Name: "cloud.account.id", DataType: "keyword", Description: "The cloud account or organization id used to identify different entities in a multi-tenant environment.\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier."},
	"cloud.availability_zone":          {Name: "cloud.availability_zone", DataType: "keyword", Description: "Availability zone in which this host is running."},
	"cloud.instance.id":                {Name: "cloud.instance.id", DataType: "keyword", Description: "Instance ID of the host machine."},
	"cloud.instance.name":              {Name: "cloud.instance.name", DataType: "keyword", Description: "Instance name of the host machine."},
	"cloud.machine.type":               {Name: "cloud.machine.type", DataType: "keyword", Description: "Machine type of the host machine."},
	"cloud.provider":                   {Name: "cloud.provider", DataType: "keyword", Description: "Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean."},
	"cloud.region":                     {Name: "cloud.region", DataType: "keyword", Description: "Region in which this host is running."},
	"container.id":                     {Name: "container.id", DataType: "keyword", Description: "Unique container id."},
	"container.image.name":             {Name: "container.image.name", DataType: "keyword", Description: "Name of the image the container was built on."},
	"container.image.tag":              {Name: "container.image.tag", DataType: "keyword", Description: "Container image tag."},
	"container.labels":                 {Name: "container.labels", DataType: "object", Description: "Image labels."},
	"container.name":                   {Name: "container.name", DataType: "keyword", Description: "Container name."},
	"container.runtime":                {Name: "container.runtime", DataType: "keyword", Description: "Runtime managing this container."},
	"destination.address":              {Name: "destination.address", DataType: "keyword", Description: "Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is."},
	"destination.bytes":                {Name: "destination.bytes", DataType: "long", Description: "Bytes sent from the destination to the source."},
	"destination.domain":               {Name: "destination.domain", DataType: "keyword", Description: "Destination domain."},
	"destination.geo.city_name":        {Name: "destination.geo.city_name", DataType: "keyword", Description: "City name."},
	"destination.geo.continent_name":   {Name: "destination.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"destination.geo.country_iso_code": {Name: "destination.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"destination.geo.country_name":     {Name: "destination.geo.country_name", DataType: "keyword", Description: "Country name."},
	"destination.geo.location":         {Name: "destination.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"destination.geo.name":             {Name: "destination.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"destination.geo.region_iso_code":  {Name: "destination.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"destination.geo.region_name":      {Name: "destination.geo.region_name", DataType: "keyword", Description: "Region name."},
	"destination.ip":                   {Name: "destination.ip", DataType: "ip", Description: "IP address of the destination.\nCan be one or multiple IPv4 or IPv6 addresses."},
	"destination.mac":                  {Name: "destination.mac", DataType: "keyword", Description: "MAC address of the destination."},
	"destination.packets":              {Name: "destination.packets", DataType: "long", Description: "Packets sent from the destination to the source."},
	"destination.port":                 {Name: "destination.port", DataType: "long", Description: "Port of the destination."},
	"destination.user.email":           {Name: "destination.user.email", DataType: "keyword", Description: "User email address."},
	"destination.user.full_name":       {Name: "destination.user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"destination.user.group.id":        {Name: "destination.user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"destination.user.group.name":      {Name: "destination.user.group.name", DataType: "keyword", Description: "Name of the group."},
	"destination.user.hash":            {Name: "destination.user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"destination.user.id":              {Name: "destination.user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"destination.user.name":            {Name: "destination.user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"ecs.version":                      {Name: "ecs.version", DataType: "keyword", Description: "ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.\nWhen querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events."},
	"error.code":                       {Name: "error.code", DataType: "keyword", Description: "Error code describing the error."},
	"error.id":                         {Name: "error.id", DataType: "keyword", Description: "Unique identifier for the error."},
	"error.message":                    {Name: "error.message", DataType: "text", Description: "Error message."},
	"event.action":                     {Name: "event.action", DataType: "keyword", Description: "The action captured by the event.\nThis describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer."},
	"event.category":                   {Name: "event.category", DataType: "keyword", Description: "Event category.\nThis contains high-level information about the contents of the event. It is more generic than `event.action`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution."},
	"event.created":                    {Name: "event.created", DataType: "date", Description: "event.created contains the date/time when the event was first read by an agent, or by your pipeline.\nThis field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.\nIn most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.\nIn case the two timestamps are identical, @timestamp should be used."},
	"event.dataset":                    {Name: "event.dataset", DataType: "keyword", Description: "Name of the dataset.\nThe concept of a `dataset` (fileset / metricset) is used in Beats as a subset of modules. It contains the information which is currently stored in metricset.name and metricset.module or fileset.name."},
	"event.duration":                   {Name: "event.duration", DataType: "long", Description: "Duration of the event in nanoseconds.\nIf event.start and event.end are known this value should be the difference between the end and start time."},
	"event.end":                        {Name: "event.end", DataType: "date", Description: "event.end contains the date when the event ended or when the activity was last observed."},
	"event.hash":                       {Name: "event.hash", DataType: "keyword", Description: "Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity."},
	"event.id":                         {Name: "event.id", DataType: "keyword", Description: "Unique ID to describe the event."},
	"event.kind":                       {Name: "event.kind", DataType: "keyword", Description: "The kind of the event.\nThis gives information about what type of information the event contains, without being specific to the contents of the event.  Examples are `event`, `state`, `alarm`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution."},
	"event.module":                     {Name: "event.module", DataType: "keyword", Description: "Name of the module this data is coming from.\nThis information is coming from the modules used in Beats or Logstash."},
	"event.original":                   {Name: "event.original", DataType: "keyword", Description: "Raw text message of entire event. Used to demonstrate log integrity.\nThis field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`."},
	"event.outcome":                    {Name: "event.outcome", DataType: "keyword", Description: "The outcome of the event.\nIf the event describes an action, this fields contains the outcome of that action. Examples outcomes are `success` and `failure`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution."},
	"event.risk_score":                 {Name: "event.risk_score", DataType: "float", Description: "Risk score or priority of the event (e.g. security solutions). Use your system's original value here."},
	"event.risk_score_norm":            {Name: "event.risk_score_norm", DataType: "float", Description: "Normalized risk score or priority of the event, on a scale of 0 to 100.\nThis is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems."},
	"event.severity":                   {Name: "event.severity", DataType: "long", Description: "Severity describes the original severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events."},
	"event.start":                      {Name: "event.start", DataType: "date", Description: "event.start contains the date when the event started or when the activity was first observed."},
	"event.timezone":                   {Name: "event.timezone", DataType: "keyword", Description: "This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.\nAcceptable timezone formats are: a canonical ID (e.g. \"Europe/Amsterdam\"), abbreviated (e.g. \"EST\") or an HH:mm differential (e.g. \"-05:00\")."},
	"event.type":                       {Name: "event.type", DataType: "keyword", Description: "Reserved for future usage.\nPlease avoid using this field for user data."},
	"file.ctime":                       {Name: "file.ctime", DataType: "date", Description: "Last time file metadata changed."},
	"file.device":                      {Name: "file.device", DataType: "keyword", Description: "Device that is the source of the file."},
	"file.extension":                   {Name: "file.extension", DataType: "keyword", Description: "File extension.\nThis should allow easy filtering by file extensions."},
	"file.gid":                         {Name: "file.gid", DataType: "keyword", Description: "Primary group ID (GID) of the file."},
	"file.group":                       {Name: "file.group", DataType: "keyword", Description: "Primary group name of the file."},
	"file.inode":                       {Name: "file.inode", DataType: "keyword", Description: "Inode representing the file in the filesystem."},
	"file.mode":                        {Name: "file.mode", DataType: "keyword", Description: "Mode of the file in octal representation."},
	"file.mtime":                       {Name: "file.mtime", DataType: "date", Description: "Last time file content was modified."},
	"file.owner":                       {Name: "file.owner", DataType: "keyword", Description: "File owner's username."},
	"file.path":                        {Name: "file.path", DataType: "keyword", Description: "Path to the file."},
	"file.size":                        {Name: "file.size", DataType: "long", Description: "File size in bytes (field is only added when `type` is `file`)."},
	"file.target_path":                 {Name: "file.target_path", DataType: "keyword", Description: "Target path for symlinks."},
	"file.type":                        {Name: "file.type", DataType: "keyword", Description: "File type (file, dir, or symlink)."},
	"file.uid":                         {Name: "file.uid", DataType: "keyword", Description: "The user ID (UID) or security identifier (SID) of the file owner."},
	"geo.city_name":                    {Name: "geo.city_name", DataType: "keyword", Description: "City name."},
	"geo.continent_name":               {Name: "geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"geo.country_iso_code":             {Name: "geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"geo.country_name":                 {Name: "geo.country_name", DataType: "keyword", Description: "Country name."},
	"geo.location":                     {Name: "geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"geo.name":                         {Name: "geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"geo.region_iso_code":              {Name: "geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"geo.region_name":                  {Name: "geo.region_name", DataType: "keyword", Description: "Region name."},
	"group.id":                         {Name: "group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"group.name":                       {Name: "group.name", DataType: "keyword", Description: "Name of the group."},
	"host.architecture":                {Name: "host.architecture", DataType: "keyword", Description: "Operating system architecture."},
	"host.geo.city_name":               {Name: "host.geo.city_name", DataType: "keyword", Description: "City name."},
	"host.geo.continent_name":          {Name: "host.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"host.geo.country_iso_code":        {Name: "host.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"host.geo.country_name":            {Name: "host.geo.country_name", DataType: "keyword", Description: "Country name."},
	"host.geo.location":                {Name: "host.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"host.geo.name":                    {Name: "host.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"host.geo.region_iso_code":         {Name: "host.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"host.geo.region_name":             {Name: "host.geo.region_name", DataType: "keyword", Description: "Region name."},
	"host.hostname":                    {Name: "host.hostname", DataType: "keyword", Description: "Hostname of the host.\nIt normally contains what the `hostname` command returns on the host machine."},
	"host.id":                          {Name: "host.id", DataType: "keyword", Description: "Unique host id.\nAs hostname is not always unique, use values that are meaningful in your environment.\nExample: The current usage of `beat.name`."},
	"host.ip":                          {Name: "host.ip", DataType: "ip", Description: "Host ip address."},
	"host.mac":                         {Name: "host.mac", DataType: "keyword", Description: "Host mac address."},
	"host.name":                        {Name: "host.name", DataType: "keyword", Description: "Name of the host.\nIt can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use."},
	"host.os.family":                   {Name: "host.os.family", DataType: "keyword", Description: "OS family (such as redhat, debian, freebsd, windows)."},
	"host.os.full":                     {Name: "host.os.full", DataType: "keyword", Description: "Operating system name, including the version or code name."},
	"host.os.kernel":                   {Name: "host.os.kernel", DataType: "keyword", Description: "Operating system kernel version as a raw string."},
	"host.os.name":                     {Name: "host.os.name", DataType: "keyword", Description: "Operating system name, without the version."},
	"host.os.platform":                 {Name: "host.os.platform", DataType: "keyword", Description: "Operating system platform (such centos, ubuntu, windows)."},
	"host.os.version":                  {Name: "host.os.version", DataType: "keyword", Description: "Operating system version as a raw string."},
	"host.type":                        {Name: "host.type", DataType: "keyword", Description: "Type of host.\nFor Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment."},
	"host.user.email":                  {Name: "host.user.email", DataType: "keyword", Description: "User email address."},
	"host.user.full_name":              {Name: "host.user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"host.user.group.id":               {Name: "host.user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"host.user.group.name":             {Name: "host.user.group.name", DataType: "keyword", Description: "Name of the group."},
	"host.user.hash":                   {Name: "host.user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"host.user.id":                     {Name: "host.user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"host.user.name":                   {Name: "host.user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"http.request.body.bytes":          {Name: "http.request.body.bytes", DataType: "long", Description: "Size in bytes of the request body."},
	"http.request.body.content":        {Name: "http.request.body.content", DataType: "keyword", Description: "The full HTTP request body."},
	"http.request.bytes":               {Name: "http.request.bytes", DataType: "long", Description: "Total size in bytes of the request (body and headers)."},
	"http.request.method":              {Name: "http.request.method", DataType: "keyword", Description: "HTTP request method.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\"."},
	"http.request.referrer":            {Name: "http.request.referrer", DataType: "keyword", Description: "Referrer for this HTTP request."},
	"http.response.body.bytes":         {Name: "http.response.body.bytes", DataType: "long", Description: "Size in bytes of the response body."},
	"http.response.body.content":       {Name: "http.response.body.content", DataType: "keyword", Description: "The full HTTP response body."},
	"http.response.bytes":              {Name: "http.response.bytes", DataType: "long", Description: "Total size in bytes of the response (body and headers)."},
	"http.response.status_code":        {Name: "http.response.status_code", DataType: "long", Description: "HTTP response status code."},
	"http.version":                     {Name: "http.version", DataType: "keyword", Description: "HTTP version."},
	"labels":                           {Name: "labels", DataType: "object", Description: "Custom key/value pairs.\nCan be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\nExample: `docker` and `k8s` labels."},
	"log.level":                        {Name: "log.level", DataType: "keyword", Description: "Original log level of the log event.\nSome examples are `warn`, `error`, `i`."},
	"log.original":                     {Name: "log.original", DataType: "keyword", Description: "This is the original log message and contains the full log message before splitting it up in multiple parts.\nIn contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.\nThis field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`."},
	"message":                          {Name: "message", DataType: "text", Description: "For log events the message field contains the log message, optimized for viewing in a log viewer.\nFor structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\nIf multiple messages exist, they can be combined into one message."},
	"network.application":              {Name: "network.application", DataType: "keyword", Description: "A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\"."},
	"network.bytes":                    {Name: "network.bytes", DataType: "long", Description: "Total bytes transferred in both directions.\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum."},
	"network.community_id":             {Name: "network.community_id", DataType: "keyword", Description: "A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.\nLearn more at https://github.com/corelight/community-id-spec."},
	"network.direction":                {Name: "network.direction", DataType: "keyword", Description: "Direction of the network traffic.\nRecommended values are:\n  * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view.\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter."},
	"network.forwarded_ip":             {Name: "network.forwarded_ip", DataType: "ip", Description: "Host IP address when the source IP address is the proxy."},
	"network.iana_number":              {Name: "network.iana_number", DataType: "keyword", Description: "IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number."},
	"network.name":                     {Name: "network.name", DataType: "keyword", Description: "Name given by operators to sections of their network."},
	"network.packets":                  {Name: "network.packets", DataType: "long", Description: "Total packets transferred in both directions.\nIf `source.packets` and `destination.packets` are known, `network.packets` is their sum."},
	"network.protocol":                 {Name: "network.protocol", DataType: "keyword", Description: "L7 Network protocol name. ex. http, lumberjack, transport protocol.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\"."},
	"network.transport":                {Name: "network.transport", DataType: "keyword", Description: "Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\"."},
	"network.type":                     {Name: "network.type", DataType: "keyword", Description: "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\"."},
	"observer.geo.city_name":           {Name: "observer.geo.city_name", DataType: "keyword", Description: "City name."},
	"observer.geo.continent_name":      {Name: "observer.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"observer.geo.country_iso_code":    {Name: "observer.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"observer.geo.country_name":        {Name: "observer.geo.country_name", DataType: "keyword", Description: "Country name."},
	"observer.geo.location":            {Name: "observer.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"observer.geo.name":                {Name: "observer.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"observer.geo.region_iso_code":     {Name: "observer.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"observer.geo.region_name":         {Name: "observer.geo.region_name", DataType: "keyword", Description: "Region name."},
	"observer.hostname":                {Name: "observer.hostname", DataType: "keyword", Description: "Hostname of the observer."},
	"observer.ip":                      {Name: "observer.ip", DataType: "ip", Description: "IP address of the observer."},
	"observer.mac":                     {Name: "observer.mac", DataType: "keyword", Description: "MAC address of the observer"},
	"observer.os.family":               {Name: "observer.os.family", DataType: "keyword", Description: "OS family (such as redhat, debian, freebsd, windows)."},
	"observer.os.full":                 {Name: "observer.os.full", DataType: "keyword", Description: "Operating system name, including the version or code name."},
	"observer.os.kernel":               {Name: "observer.os.kernel", DataType: "keyword", Description: "Operating system kernel version as a raw string."},
	"observer.os.name":                 {Name: "observer.os.name", DataType: "keyword", Description: "Operating system name, without the version."},
	"observer.os.platform":             {Name: "observer.os.platform", DataType: "keyword", Description: "Operating system platform (such centos, ubuntu, windows)."},
	"observer.os.version":              {Name: "observer.os.version", DataType: "keyword", Description: "Operating system version as a raw string."},
	"observer.serial_number":           {Name: "observer.serial_number", DataType: "keyword", Description: "Observer serial number."},
	"observer.type":                    {Name: "observer.type", DataType: "keyword", Description: "The type of the observer the data is coming from.\nThere is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`."},
	"observer.vendor":                  {Name: "observer.vendor", DataType: "keyword", Description: "observer vendor information."},
	"observer.version":                 {Name: "observer.version", DataType: "keyword", Description: "Observer version."},
	"organization.id":                  {Name: "organization.id", DataType: "keyword", Description: "Unique identifier for the organization."},
	"organization.name":                {Name: "organization.name", DataType: "keyword", Description: "Organization name."},
	"os.family":                        {Name: "os.family", DataType: "keyword", Description: "OS family (such as redhat, debian, freebsd, windows)."},
	"os.full":                          {Name: "os.full", DataType: "keyword", Description: "Operating system name, including the version or code name."},
	"os.kernel":                        {Name: "os.kernel", DataType: "keyword", Description: "Operating system kernel version as a raw string."},
	"os.name":                          {Name: "os.name", DataType: "keyword", Description: "Operating system name, without the version."},
	"os.platform":                      {Name: "os.platform", DataType: "keyword", Description: "Operating system platform (such centos, ubuntu, windows)."},
	"os.version":                       {Name: "os.version", DataType: "keyword", Description: "Operating system version as a raw string."},
	"process.args":                     {Name: "process.args", DataType: "keyword", Description: "Array of process arguments.\nMay be filtered to protect sensitive information."},
	"process.executable":               {Name: "process.executable", DataType: "keyword", Description: "Absolute path to the process executable."},
	"process.name":                     {Name: "process.name", DataType: "keyword", Description: "Process name.\nSometimes called program name or similar."},
	"process.pid":                      {Name: "process.pid", DataType: "long", Description: "Process id."},
	"process.ppid":                     {Name: "process.ppid", DataType: "long", Description: "Parent process' pid."},
	"process.start":                    {Name: "process.start", DataType: "date", Description: "The time the process started."},
	"process.thread.id":                {Name: "process.thread.id", DataType: "long", Description: "Thread ID."},
	"process.title":                    {Name: "process.title", DataType: "keyword", Description: "Process title.\nThe proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened."},
	"process.working_directory":        {Name: "process.working_directory", DataType: "keyword", Description: "The working directory of the process."},
	"related.ip":                       {Name: "related.ip", DataType: "ip", Description: "All of the IPs seen on your event."},
	"server.address":                   {Name: "server.address", DataType: "keyword", Description: "Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is."},
	"server.bytes":                     {Name: "server.bytes", DataType: "long", Description: "Bytes sent from the server to the client."},
	"server.domain":                    {Name: "server.domain", DataType: "keyword", Description: "Server domain."},
	"server.geo.city_name":             {Name: "server.geo.city_name", DataType: "keyword", Description: "City name."},
	"server.geo.continent_name":        {Name: "server.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"server.geo.country_iso_code":      {Name: "server.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"server.geo.country_name":          {Name: "server.geo.country_name", DataType: "keyword", Description: "Country name."},
	"server.geo.location":              {Name: "server.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"server.geo.name":                  {Name: "server.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"server.geo.region_iso_code":       {Name: "server.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"server.geo.region_name":           {Name: "server.geo.region_name", DataType: "keyword", Description: "Region name."},
	"server.ip":                        {Name: "server.ip", DataType: "ip", Description: "IP address of the server.\nCan be one or multiple IPv4 or IPv6 addresses."},
	"server.mac":                       {Name: "server.mac", DataType: "keyword", Description: "MAC address of the server."},
	"server.packets":                   {Name: "server.packets", DataType: "long", Description: "Packets sent from the server to the client."},
	"server.port":                      {Name: "server.port", DataType: "long", Description: "Port of the server."},
	"server.user.email":                {Name: "server.user.email", DataType: "keyword", Description: "User email address."},
	"server.user.full_name":            {Name: "server.user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"server.user.group.id":             {Name: "server.user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"server.user.group.name":           {Name: "server.user.group.name", DataType: "keyword", Description: "Name of the group."},
	"server.user.hash":                 {Name: "server.user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"server.user.id":                   {Name: "server.user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"server.user.name":                 {Name: "server.user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"service.ephemeral_id":             {Name: "service.ephemeral_id", DataType: "keyword", Description: "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not."},
	"service.id":                       {Name: "service.id", DataType: "keyword", Description: "Unique identifier of the running service.\nThis id should uniquely identify this service. This makes it possible to correlate logs and metrics for one specific service.\nExample: If you are experiencing issues with one redis instance, you can filter on that id to see metrics and logs for that single instance."},
	"service.name":                     {Name: "service.name", DataType: "keyword", Description: "Name of the service data is collected from.\nThe name of the service is normally user given. This allows if two instances of the same service are running on the same machine they can be differentiated by the `service.name`.\nAlso it allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the service.name could contain the cluster name. For Beats the service.name is by default a copy of the `service.type` field if no name is specified."},
	"service.state":                    {Name: "service.state", DataType: "keyword", Description: "Current state of the service."},
	"service.type":                     {Name: "service.type", DataType: "keyword", Description: "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`."},
	"service.version":                  {Name: "service.version", DataType: "keyword", Description: "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service."},
	"source.address":                   {Name: "source.address", DataType: "keyword", Description: "Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is."},
	"source.bytes":                     {Name: "source.bytes", DataType: "long", Description: "Bytes sent from the source to the destination."},
	"source.domain":                    {Name: "source.domain", DataType: "keyword", Description: "Source domain."},
	"source.geo.city_name":             {Name: "source.geo.city_name", DataType: "keyword", Description: "City name."},
	"source.geo.continent_name":        {Name: "source.geo.continent_name", DataType: "keyword", Description: "Name of the continent."},
	"source.geo.country_iso_code":      {Name: "source.geo.country_iso_code", DataType: "keyword", Description: "Country ISO code."},
	"source.geo.country_name":          {Name: "source.geo.country_name", DataType: "keyword", Description: "Country name."},
	"source.geo.location":              {Name: "source.geo.location", DataType: "geo_point", Description: "Longitude and latitude."},
	"source.geo.name":                  {Name: "source.geo.name", DataType: "keyword", Description: "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation."},
	"source.geo.region_iso_code":       {Name: "source.geo.region_iso_code", DataType: "keyword", Description: "Region ISO code."},
	"source.geo.region_name":           {Name: "source.geo.region_name", DataType: "keyword", Description: "Region name."},
	"source.ip":                        {Name: "source.ip", DataType: "ip", Description: "IP address of the source.\nCan be one or multiple IPv4 or IPv6 addresses."},
	"source.mac":                       {Name: "source.mac", DataType: "keyword", Description: "MAC address of the source."},
	"source.packets":                   {Name: "source.packets", DataType: "long", Description: "Packets sent from the source to the destination."},
	"source.port":                      {Name: "source.port", DataType: "long", Description: "Port of the source."},
	"source.user.email":                {Name: "source.user.email", DataType: "keyword", Description: "User email address."},
	"source.user.full_name":            {Name: "source.user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"source.user.group.id":             {Name: "source.user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"source.user.group.name":           {Name: "source.user.group.name", DataType: "keyword", Description: "Name of the group."},
	"source.user.hash":                 {Name: "source.user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"source.user.id":                   {Name: "source.user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"source.user.name":                 {Name: "source.user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"tags":                             {Name: "tags", DataType: "keyword", Description: "List of keywords used to tag each event."},
	"url.domain":                       {Name: "url.domain", DataType: "keyword", Description: "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field."},
	"url.fragment":                     {Name: "url.fragment", DataType: "keyword", Description: "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment."},
	"url.full":                         {Name: "url.full", DataType: "keyword", Description: "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source."},
	"url.original":                     {Name: "url.original", DataType: "keyword", Description: "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not."},
	"url.password":                     {Name: "url.password", DataType: "keyword", Description: "Password of the request."},
	"url.path":                         {Name: "url.path", DataType: "keyword", Description: "Path of the request, such as \"/search\"."},
	"url.port":                         {Name: "url.port", DataType: "long", Description: "Port of the request, such as 443."},
	"url.query":                        {Name: "url.query", DataType: "keyword", Description: "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases."},
	"url.scheme":                       {Name: "url.scheme", DataType: "keyword", Description: "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme."},
	"url.username":                     {Name: "url.username", DataType: "keyword", Description: "Username of the request."},
	"user.email":                       {Name: "user.email", DataType: "keyword", Description: "User email address."},
	"user.full_name":                   {Name: "user.full_name", DataType: "keyword", Description: "User's full name, if available."},
	"user.group.id":                    {Name: "user.group.id", DataType: "keyword", Description: "Unique identifier for the group on the system/platform."},
	"user.group.name":                  {Name: "user.group.name", DataType: "keyword", Description: "Name of the group."},
	"user.hash":                        {Name: "user.hash", DataType: "keyword", Description: "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used."},
	"user.id":                          {Name: "user.id", DataType: "keyword", Description: "One or multiple unique identifiers of the user."},
	"user.name":                        {Name: "user.name", DataType: "keyword", Description: "Short name or login of the user."},
	"user_agent.device.name":           {Name: "user_agent.device.name", DataType: "keyword", Description: "Name of the device."},
	"user_agent.name":                  {Name: "user_agent.name", DataType: "keyword", Description: "Name of the user agent."},
	"user_agent.original":              {Name: "user_agent.original", DataType: "keyword", Description: "Unparsed version of the user_agent."},
	"user_agent.os.family":             {Name: "user_agent.os.family", DataType: "keyword", Description: "OS family (such as redhat, debian, freebsd, windows)."},
	"user_agent.os.full":               {Name: "user_agent.os.full", DataType: "keyword", Description: "Operating system name, including the version or code name."},
	"user_agent.os.kernel":             {Name: "user_agent.os.kernel", DataType: "keyword", Description: "Operating system kernel version as a raw string."},
	"user_agent.os.name":               {Name: "user_agent.os.name", DataType: "keyword", Description: "Operating system name, without the version."},
	"user_agent.os.platform":           {Name: "user_agent.os.platform", DataType: "keyword", Description: "Operating system platform (such centos, ubuntu, windows)."},
	"user_agent.os.version":            {Name: "user_agent.os.version", DataType: "keyword", Description: "Operating system version as a raw string."},
	"user_agent.version":               {Name: "user_agent.version", DataType: "keyword", Description: "Version of the user agent."},
}
